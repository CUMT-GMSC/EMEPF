import json
import os
import pandas
import numpy as np

import matplotlib.pyplot as plt


class DrawGraph(object):
    def __init__(self, json_result_path):
        self.json_result_path = json_result_path
        self.json_result_list = None  # [json_result_name, ... ]
        self.json_result_dict = None  # {json_result_name:[hv list]}
        self.hv_dict = None  # {json_result_name:[hv_max, hv_last]}
        self.load_json_data()
        self.draw_table()
        # self.load_json_data2()

        # self.draw_graph()
        # self.draw_graph_De()
        # self.draw_graph_PR()
        # self.draw_graph_IMM()
        # self.draw_graph_DD()
        # self.draw_graph_Random()

    def load_json_data(self):
        for _, _, json_result_name in os.walk(self.json_result_path):
            # self.json_result_list = json_result_name
            self.json_result_list = [f for f in json_result_name if f.endswith('.json')]

        self.json_result_dict = {json_result_name: [] for json_result_name in self.json_result_list}

        for json_result_name in self.json_result_list:
            with open(self.json_result_path + json_result_name, 'r') as f:
            # with open(file_path + json_result_name, 'r') as f:
                line = f.readline()
                while line:
                    if line.strip().startswith("\"hv\""):
                        hv = float(line.strip()[7:-1])
                        self.json_result_dict[json_result_name].append(hv)
                    line = f.readline()

        self.save_last_and_max_hv()

    def load_json_data2(self):
        for _, _, json_result_name in os.walk(self.json_result_path):
            self.json_result_list = json_result_name

        self.json_result_dict = {json_result_name: [] for json_result_name in self.json_result_list}
        for json_result_name in self.json_result_list:
            with open(file_path + json_result_name, 'r') as f:
                json_data = json.load(f)
                pop_objs_dict = json_data[-1]['pop_objs_dict']
                print(pop_objs_dict)

                pass

    def save_last_and_max_hv(self):
        self.hv_dict = {json_result_name: [] for json_result_name in self.json_result_list}
        for json_result_name in self.json_result_dict:
            self.hv_dict[json_result_name].append(max(self.json_result_dict[json_result_name]))
            self.hv_dict[json_result_name].append(self.json_result_dict[json_result_name][-1])

    def draw_table(self):
        # hv_max_array = np.array([value[0] for value in self.hv_dict.values()]).reshape(9, 9)
        hv_max_array = np.array([value[0] for value in self.hv_dict.values()]).reshape(1, 1)
        # row = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]  # fc_ratio
        row = [0.2]
        col = [0.7]
        # col = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]  # fm_p
        df_hv_max = pandas.DataFrame(hv_max_array, index=row, columns=col)
        df_hv_max.columns.rename(r'fc_ratio\fm_p', inplace=True)
        print(df_hv_max)

        # hv_last_array = np.array([value[1] for value in self.hv_dict.values()]).reshape(9, 9)
        hv_last_array = np.array([value[1] for value in self.hv_dict.values()]).reshape(1, 1)
        df_hv_last = pandas.DataFrame(hv_last_array, index=row, columns=col)
        df_hv_last.columns.rename(r'fc_ratio\fm_p', inplace=True)
        print(df_hv_last)

        df_hv_max.to_excel('hv_max.xlsx')
        df_hv_last.to_excel('hv_last.xlsx')

    def draw_graph(self):
        # combine .1 .1
        pop_objs_dict = {
            0: ([161, 82, 5, 350, 220, 216, 976, 250, 184, 378], 0.029930348258706257, 0.0002978203781280816),
            1: ([161, 82, 47, 23, 87, 291, 14, 250, 184, 59], 0.03564179104477619, 0.00044196406860730244),
            2: ([161, 82, 47, 108, 87, 63, 14, 250, 184, 59], 0.0400796019900499, 0.0005643814268916677),
            3: ([161, 82, 47, 341, 87, 63, 14, 250, 22, 435], 0.038049751243781224, 0.0005583446397202189),
            4: ([161, 82, 47, 446, 87, 63, 14, 250, 184, 59], 0.037651741293532465, 0.0005180534131647778),
            5: ([161, 82, 47, 868, 87, 30, 74, 250, 184, 378], 0.03259701492537293, 0.0003774908892816139),
            6: ([161, 82, 47, 949, 180, 63, 241, 250, 184, 59], 0.0323184079601988, 0.00036015828359424424),
            7: ([161, 82, 47, 949, 180, 586, 236, 250, 184, 59], 0.02919402985074607, 0.0002867646437724631),
            8: ([161, 82, 83, 108, 87, 63, 14, 250, 184, 6], 0.04304477611940317, 0.0007164765147695712),
            9: ([161, 82, 83, 108, 87, 63, 14, 250, 435, 6], 0.043044776119403196, 0.0007459232601157423),
            10: ([161, 82, 368, 108, 87, 63, 14, 250, 184, 435], 0.04081592039801015, 0.000597998638630766),
            11: ([161, 83, 47, 949, 180, 63, 14, 250, 184, 59], 0.03749253731343289, 0.0005151061467903704),
            # 12: ([161, 83, 122, 108, 87, 63, 14, 250, 184, 435], 0.04453731343283604, 0.0007502829646745102),
            13: ([161, 83, 122, 406, 87, 63, 14, 250, 184, 59], 0.042825870646766344, 0.0006694397081895172),
            14: ([161, 83, 175, 108, 309, 63, 14, 250, 184, 435], 0.04087562189054741, 0.0006155757224680444),
            15: ([161, 83, 201, 406, 87, 261, 14, 250, 184, 59], 0.03834825870646779, 0.0005643711128985287),
            16: ([161, 83, 210, 456, 87, 63, 14, 250, 184, 59], 0.040696517412935444, 0.0005670929838250398)

        }

        prior_pop_objs_dict = {
            'DD': ([161, 83, 122, 87, 108, 63, 14, 6, 435, 250], 0.04431840796019923, 0.0008062639357557984),
            'DE': ([161, 83, 122, 108, 87, 63, 14, 250, 184, 435], 0.04453731343283604, 0.0007502829646745102),
            'PR': ([161, 6, 87, 63, 130, 108, 22, 107, 65, 334], 0.03930348258706483, 0.0010651990580852317),
            'IMM': ([161, 122, 83, 108, 87, 63, 14, 250, 435, 6], 0.04431840796019923, 0.0008062639357557984)}

        # for index in prior_pop_objs_dict:
        #     pop_objs_dict[index] = prior_pop_objs_dict[index]
        sigma_s = [value[1] for value in pop_objs_dict.values()]
        ev_s = [value[2] for value in pop_objs_dict.values()]
        plt.figure(figsize=(10, 10), dpi=200)
        plt.ylim((0.0002, 0.0012))
        # plt.title('email_Eu_core')
        plt.xlabel('$\sigma$\'(S)', fontsize=20)
        plt.ylabel('EV(S)', fontsize=20)
        plt.scatter(sigma_s, ev_s, marker='s', label='RPMFIM')

        DD_sigma_s, DD_ev_s = prior_pop_objs_dict['DD'][1], prior_pop_objs_dict['DD'][2]
        plt.scatter(DD_sigma_s, DD_ev_s, marker='+', label='DD')

        DE_sigma_s, DE_ev_s = prior_pop_objs_dict['DE'][1], prior_pop_objs_dict['DE'][2]
        plt.scatter(DE_sigma_s, DE_ev_s, marker='*', label='DE')

        PR_sigma_s, PR_ev_s = prior_pop_objs_dict['PR'][1], prior_pop_objs_dict['PR'][2]
        plt.scatter(PR_sigma_s, PR_ev_s, marker='^', label='PR')

        IMM_sigma_s, IMM_ev_s = prior_pop_objs_dict['IMM'][1], prior_pop_objs_dict['IMM'][2]
        plt.scatter(IMM_sigma_s, IMM_ev_s, marker='v', label='IMM')
        plt.legend()
        # for i in range(len(pop_objs_dict.keys())):
        #     plt.text(delta_s[i], ev_s[i], i, fontsize=10, color="r", weight="light",
        #              horizontalalignment='right')
        # plt.show()
        plt.savefig('result/graph/Combine.png')

    def draw_graph_De(self):

        pop_objs_dict = {
            0: ([161, 1, 122, 378, 22, 462, 14, 250, 184, 130], 0.0364378109452737, 0.0004587137942563668),
            1: ([161, 83, 122, 108, 87, 63, 14, 250, 184, 435], 0.04284577114427882, 0.0008298871767467548),
            2: ([161, 83, 122, 129, 87, 22, 194, 250, 184, 334], 0.03906467661691561, 0.0005682446822847956),
            3: ([161, 83, 122, 378, 87, 22, 14, 250, 184, 251], 0.039601990049751463, 0.0006251592839616025),
            4: ([161, 83, 122, 691, 87, 22, 14, 250, 184, 435], 0.04017910447761212, 0.0006380905761827837),
            5: ([161, 83, 122, 691, 87, 63, 14, 250, 184, 435], 0.040636815920398174, 0.0007498734634423934),
            6: ([161, 83, 122, 947, 87, 22, 14, 250, 184, 435], 0.039820895522388225, 0.0006294250273095753),
            7: ([161, 212, 622, 245, 87, 22, 14, 250, 184, 334], 0.03584079601990049, 0.00041299633545883855),
            8: ([161, 233, 122, 378, 87, 22, 14, 250, 184, 435], 0.038985074626865825, 0.0005379858206026326),
            9: ([161, 943, 122, 378, 87, 22, 14, 250, 184, 130], 0.03808955223880606, 0.0004985104403268838),
            10: ([161, 943, 122, 378, 87, 22, 14, 250, 184, 435], 0.03832835820895532, 0.0005278606207029073),
            11: ([375, 1, 64, 347, 22, 462, 366, 250, 184, 130], 0.026407960199004807, 0.00030498131933624756),
            12: ([375, 413, 122, 179, 115, 22, 290, 250, 184, 130], 0.030786069651741122, 0.00034036579028305956),
            13: ([375, 943, 122, 378, 87, 22, 115, 250, 637, 130], 0.031164179104477406, 0.0003988872736416939)}

        prior_pop_objs_dict = {
            0: ([161, 83, 122, 108, 87, 63, 14, 250, 184, 435], 0.04284577114427882, 0.0008298871767467548),
            1: ([6, 212, 130, 378, 85, 22, 115, 88, 167, 334], 0.03428855721393028, 0.0006712951022240504),
            2: ([534, 143, 821, 84, 106, 284, 283, 59, 64, 65], 0.03277611940298492, 0.0009663279238068848),
            3: ([253, 425, 116, 129, 406, 7, 213, 97, 18, 421], 0.033074626865671516, 0.0007964929746899882),
            4: ([170, 107, 166, 281, 412, 495, 972, 134, 420, 474], 0.028457711442785888, 0.0007198998958606543)}


        # for index in prior_pop_objs_dict:
        #     pop_objs_dict[index] = prior_pop_objs_dict[index]
        sigma_s = [value[1] for value in pop_objs_dict.values()]
        ev_s = [value[2] for value in pop_objs_dict.values()]
        plt.figure(figsize=(10, 10), dpi=200)
        plt.ylim((0.0002, 0.0012))
        # plt.title('email_Eu_core')
        plt.xlabel('$\sigma$\'(S)', fontsize=20)
        plt.ylabel('EV(S)', fontsize=20)
        plt.scatter(sigma_s, ev_s, marker='s', label='RPMFIM')

        De_sigma_s = [value[1] for value in prior_pop_objs_dict.values()]
        De_ev_s = [value[2] for value in prior_pop_objs_dict.values()]
        plt.scatter(De_sigma_s, De_ev_s, marker='*', label='De')

        plt.legend()
        # for i in range(len(pop_objs_dict.keys())):
        #     plt.text(delta_s[i], ev_s[i], i, fontsize=10, color="r", weight="light",
        #              horizontalalignment='right')
        # plt.show()
        plt.savefig('result/graph/De.png')

    def draw_graph_PR(self):
        pop_objs_dict = {
            0: ([74, 122, 378, 190, 130, 328, 234, 184, 280, 334], 0.029791044776119213, 0.0002916114010434274),
            1: ([74, 499, 378, 190, 130, 328, 234, 184, 280, 334], 0.027442786069651556, 0.0002477008292323401),
            2: ([161, 6, 87, 63, 130, 108, 22, 107, 65, 334], 0.03992039800995041, 0.0009636616106198611),
            3: ([161, 122, 378, 63, 130, 108, 22, 184, 280, 334], 0.03922388059701514, 0.00048782667053752174),
            4: ([161, 122, 378, 190, 130, 108, 22, 184, 280, 334], 0.03699502487562202, 0.00040781728995593626),
            5: ([161, 171, 378, 63, 130, 10, 22, 184, 846, 334], 0.03498507462686559, 0.00034499094900225887),
            6: ([161, 171, 378, 190, 130, 328, 234, 184, 131, 212], 0.03168159203980079, 0.00031252764387232774),
            7: ([161, 171, 378, 190, 130, 328, 407, 184, 280, 212], 0.03090547263681572, 0.00029540466754699227),
            8: ([161, 171, 378, 190, 130, 328, 407, 184, 846, 212], 0.031184079601989843, 0.00030014195585456935),
            9: ([161, 171, 378, 190, 130, 328, 407, 957, 280, 212], 0.02823880597014906, 0.0002908937260490853)}

        prior_pop_objs_dict = {
            0: ([161, 6, 87, 63, 130, 108, 22, 107, 65, 334], 0.03992039800995041, 0.0009636616106198611),
            1: ([138, 122, 378, 190, 129, 192, 302, 184, 167, 212], 0.031781094527363, 0.0005684096410093094),
            2: ([821, 171, 435, 97, 291, 406, 216, 83, 421, 7], 0.032338308457711316, 0.0007348693877885904),
            3: ([460, 534, 45, 257, 52, 366, 75, 109, 21, 510], 0.022706467661691394, 0.0006851824053187381),
            4: ([82, 283, 233, 341, 88, 284, 270, 59, 29, 494], 0.03128358208955203, 0.0006464729039711531)}

        # for index in prior_pop_objs_dict:
        #     pop_objs_dict[index] = prior_pop_objs_dict[index]
        sigma_s = [value[1] for value in pop_objs_dict.values()]
        ev_s = [value[2] for value in pop_objs_dict.values()]
        plt.figure(figsize=(10, 10), dpi=200)
        plt.ylim((0.0002, 0.0012))
        # plt.title('email_Eu_core')
        plt.xlabel('$\sigma$\'(S)', fontsize=20)
        plt.ylabel('EV(S)', fontsize=20)
        plt.scatter(sigma_s, ev_s, marker='s', label='RPMFIM')

        PR_sigma_s = [value[1] for value in prior_pop_objs_dict.values()]
        PR_ev_s = [value[2] for value in prior_pop_objs_dict.values()]
        plt.scatter(PR_sigma_s, PR_ev_s, marker='^', label='PR')


        plt.legend()
        # for i in range(len(pop_objs_dict.keys())):
        #     plt.text(delta_s[i], ev_s[i], i, fontsize=10, color="r", weight="light",
        #              horizontalalignment='right')
        # plt.show()
        plt.savefig('result/graph/PR.png')

    def draw_graph_IMM(self):
        pop_objs_dict = {
            0: ([161, 122, 83, 108, 87, 63, 14, 250, 435, 6], 0.04340298507462698, 0.0008770932648946353),
            1: ([161, 122, 83, 926, 87, 63, 14, 250, 435, 6], 0.04135323383084591, 0.0008262760131017135),
            2: ([161, 122, 83, 926, 87, 378, 14, 250, 435, 6], 0.040457711442786204, 0.0007689095108115516),
            3: ([161, 122, 296, 131, 22, 378, 158, 250, 435, 168], 0.034467661691542216, 0.0004939241437740711),
            4: ([161, 212, 83, 926, 534, 72, 14, 250, 474, 972], 0.036059701492537254, 0.0005387137619325141),
            5: ([184, 122, 83, 594, 534, 161, 14, 250, 435, 972], 0.039343283582089626, 0.0006205785606217495),
            6: ([184, 212, 83, 143, 534, 161, 14, 803, 474, 972], 0.03675621890547261, 0.0005714555763454886),
            7: ([184, 216, 83, 926, 22, 161, 377, 250, 474, 786], 0.03406965174129338, 0.0003471119178637499),
            8: ([372, 216, 922, 68, 87, 8, 15, 250, 474, 643], 0.02543283582089535, 0.00033160655314313586)}

        prior_pop_objs_dict = {
            0: ([161, 122, 83, 108, 87, 63, 14, 250, 435, 6], 0.04340298507462698, 0.0008770932648946353),
            1: ([184, 212, 85, 143, 534, 378, 334, 7, 130, 972], 0.03313432835820877, 0.000622148152662373),
            2: ([18, 167, 84, 65, 59, 410, 255, 22, 821, 97], 0.031960199004974925, 0.001006902486109754),
            3: ([425, 302, 15, 301, 412, 550, 933, 499, 166, 88], 0.02881592039800976, 0.0008955664123443105),
            4: ([66, 406, 296, 253, 495, 8, 158, 134, 474, 168], 0.02716417910447742, 0.0005042644001649961)}

        # for index in prior_pop_objs_dict:
        #     pop_objs_dict[index] = prior_pop_objs_dict[index]
        sigma_s = [value[1] for value in pop_objs_dict.values()]
        ev_s = [value[2] for value in pop_objs_dict.values()]
        plt.figure(figsize=(10, 10), dpi=200)
        plt.ylim((0.0002, 0.0012))
        # plt.title('email_Eu_core')
        plt.xlabel('$\sigma$\'(S)', fontsize=20)
        plt.ylabel('EV(S)', fontsize=20)
        plt.scatter(sigma_s, ev_s, marker='s', label='RPMFIM')

        IMM_sigma_s = [value[1] for value in prior_pop_objs_dict.values()]
        IMM_ev_s = [value[2] for value in prior_pop_objs_dict.values()]
        plt.scatter(IMM_sigma_s, IMM_ev_s, marker='v', label='IMM')
        plt.legend()
        plt.savefig('result/graph/IMM.png')

    def draw_graph_DD(self):
        pop_objs_dict = {
            0: ([161, 83, 122, 87, 108, 63, 14, 6, 435, 250], 0.04449751243781116, 0.000715950902134396),
            1: ([161, 85, 122, 87, 534, 115, 14, 972, 435, 334], 0.04003980099502495, 0.0005559387937106525),
            2: ([161, 115, 122, 87, 413, 64, 14, 84, 343, 250], 0.03884577114427875, 0.0005536352543569561),
            3: ([161, 115, 122, 168, 37, 64, 296, 488, 22, 708], 0.0313233830845769, 0.0003762481467037006),
            4: ([161, 115, 199, 87, 475, 64, 622, 190, 494, 250], 0.03201990049751224, 0.00038146964727323355),
            5: ([161, 115, 199, 168, 475, 64, 296, 84, 494, 250], 0.032537313432835654, 0.0004020638982894191),
            6: ([161, 115, 230, 168, 239, 64, 474, 84, 435, 250], 0.033651741293532246, 0.0004326161774628514),
            7: ([161, 115, 283, 168, 239, 64, 14, 84, 22, 250], 0.03598009950248761, 0.0005104421889079413),
            8: ([161, 115, 348, 168, 8, 64, 296, 488, 22, 708], 0.02786069651741273, 0.0002890322594396004),
            9: ([161, 115, 348, 168, 8, 64, 296, 938, 22, 708], 0.027820895522387857, 0.0002779239734386752),
            10: ([161, 115, 348, 168, 108, 64, 14, 938, 22, 250], 0.03506467661691531, 0.00043541057132696475),
            11: ([161, 115, 501, 168, 413, 64, 296, 84, 494, 250], 0.03211940298507443, 0.00039178638919437294),
            12: ([161, 115, 857, 87, 475, 64, 14, 196, 494, 250], 0.0351442786069651, 0.0004640849233410102),
            13: ([161, 115, 857, 679, 475, 64, 125, 196, 22, 250], 0.03046766169154209, 0.00029689677480206213),
            14: ([161, 152, 122, 87, 108, 63, 14, 6, 435, 250], 0.04220895522388076, 0.0006570261629858223)}

        prior_pop_objs_dict = {
            0: ([161, 83, 122, 87, 108, 63, 14, 6, 435, 250], 0.04449751243781116, 0.000715950902134396),
            1: ([184, 85, 378, 212, 534, 7, 106, 972, 167, 334], 0.03379104477611925, 0.0007286876169505309),
            2: ([130, 143, 410, 425, 97, 18, 421, 499, 302, 88], 0.030507462686566962, 0.0014036318357800216),
            3: ([495, 255, 406, 412, 550, 15, 933, 158, 66, 12], 0.027203980099502315, 0.0012052132788481097),
            4: ([233, 115, 283, 168, 8, 64, 296, 84, 343, 22], 0.0287960199004973, 0.00044849266768367483)}

        # for index in prior_pop_objs_dict:
        #     pop_objs_dict[index] = prior_pop_objs_dict[index]
        sigma_s = [value[1] for value in pop_objs_dict.values()]
        ev_s = [value[2] for value in pop_objs_dict.values()]
        plt.figure(figsize=(10, 10), dpi=200)
        plt.ylim((0.0002, 0.0015))
        # plt.title('email_Eu_core')
        plt.xlabel('$\sigma$\'(S)', fontsize=20)
        plt.ylabel('EV(S)', fontsize=20)
        plt.scatter(sigma_s, ev_s, marker='s', label='RPMFIM')

        DD_sigma_s = [value[1] for value in prior_pop_objs_dict.values()]
        DD_ev_s = [value[2] for value in prior_pop_objs_dict.values()]
        plt.scatter(DD_sigma_s, DD_ev_s, marker='+', label='DD')

        plt.legend()
        plt.savefig('result/graph/DD.png')

    def draw_graph_Random(self):
        # N=20 T=20
        pop_objs_dict = {
            0: ([53, 3, 184, 482, 85, 523, 34, 731, 334, 122], 0.026985074626865516, 0.000394256933728358),
            1: ([83, 283, 184, 376, 699, 435, 73, 116, 334, 122], 0.032378109452736184, 0.0006502449492540048),
            2: ([83, 283, 184, 421, 85, 435, 121, 116, 334, 871], 0.03261691542288543, 0.0036101578023794247),
            3: ([83, 283, 184, 847, 85, 435, 127, 731, 334, 87], 0.0323980099502486, 0.0006797483163027868),
            4: ([83, 906, 184, 482, 85, 182, 121, 116, 462, 122], 0.02955223880596995, 0.00047316407511999967),
            5: ([83, 949, 184, 482, 85, 435, 839, 964, 334, 87], 0.03138308457711423, 0.0005174544868730961),
            6: ([834, 3, 184, 449, 85, 435, 127, 731, 334, 122], 0.029213930348258525, 0.00046686435492009315)}

        # N=20 T=200
        pop_objs_dict = {
            0: ([82, 108, 83, 122, 161, 115, 250, 184, 62, 18], 0.03872636815920409, 0.0005903038671188167),
            1: ([82, 108, 83, 122, 161, 435, 250, 184, 62, 18], 0.038805970149253854, 0.0006337112159349477),
            2: ([82, 134, 83, 116, 22, 115, 250, 184, 62, 18], 0.03490547263681594, 0.00031270623545196787),
            3: ([82, 134, 83, 116, 22, 115, 250, 184, 62, 66], 0.034348258706467634, 0.00029332084996974874),
            4: ([82, 134, 83, 116, 161, 115, 250, 184, 62, 66], 0.03635820895522394, 0.00036119294778203263),
            5: ([82, 134, 83, 116, 161, 420, 250, 184, 334, 66], 0.03705472636815926, 0.0003884915035103267),
            6: ([82, 134, 83, 122, 161, 115, 250, 184, 62, 18], 0.03808955223880607, 0.00047171845110376175),
            7: ([82, 134, 83, 122, 161, 115, 250, 184, 62, 66], 0.037532338308457806, 0.0004529543482960804),
            8: ([82, 134, 83, 122, 161, 435, 250, 184, 62, 18], 0.038248756218905576, 0.0005279462463854629),
            9: ([82, 134, 83, 122, 161, 435, 250, 184, 474, 18], 0.03832835820895531, 0.0005427024921900594),
            10: ([82, 134, 215, 701, 22, 47, 250, 184, 62, 227], 0.02837810945273611, 0.0002096331297682806),
            11: ([82, 134, 491, 116, 22, 115, 250, 184, 62, 66], 0.031502487562188826, 0.0002448319825638838),
            12: ([82, 134, 491, 116, 22, 115, 250, 216, 62, 66], 0.03060696517412912, 0.00024171427713082027),
            13: ([82, 134, 491, 116, 161, 47, 250, 184, 62, 66], 0.032776119402984895, 0.00026654363481625094),
            14: ([82, 134, 491, 116, 161, 115, 250, 184, 62, 66], 0.03373134328358199, 0.0002767278826247863),
            15: ([82, 134, 491, 257, 4, 47, 250, 285, 646, 66], 0.024736318407960034, 0.0002067369884579278),
            16: ([82, 134, 491, 308, 161, 115, 250, 184, 62, 66], 0.031920398009950016, 0.00024924391746331546),
            17: ([82, 134, 491, 336, 22, 115, 250, 216, 62, 66], 0.028796019900497287, 0.00021315844075330218),
            18: ([82, 134, 491, 592, 22, 115, 250, 184, 62, 66], 0.029771144278606748, 0.00021545561862633763),
            19: ([82, 134, 491, 721, 22, 115, 250, 184, 62, 66], 0.029890547263681372, 0.0002250388127622966)}

        # N=100 T=200
        pop_objs_dict = {
            0: ([14, 59, 161, 250, 18, 122, 22, 334, 184, 130], 0.039402985074627035, 0.0004121921575644967),
            1: ([14, 59, 161, 250, 18, 122, 22, 334, 212, 184], 0.03936318407960216, 0.00039860883534663366),
            2: ([14, 59, 161, 250, 435, 122, 22, 334, 212, 184], 0.039920398009950446, 0.0004352554664581868),
            3: ([14, 63, 161, 250, 18, 122, 22, 334, 212, 184], 0.04005970149253752, 0.0004393941617533804),
            4: ([14, 63, 161, 250, 435, 122, 22, 334, 212, 130], 0.04023880597014941, 0.0004792746027864186),
            5: ([14, 122, 161, 250, 435, 134, 22, 334, 212, 184], 0.03958208955223897, 0.0004196782008304337),
            6: ([14, 122, 161, 250, 435, 474, 22, 334, 212, 184], 0.03962189054726383, 0.0004298562776189319),
            7: ([63, 122, 161, 250, 435, 14, 22, 334, 212, 130], 0.04023880597014941, 0.0004792746027864186),
            8: ([134, 59, 61, 372, 18, 474, 22, 334, 212, 130], 0.03132338308457692, 0.0001971035003768948),
            9: ([134, 59, 96, 250, 18, 474, 22, 334, 184, 130], 0.03263681592039789, 0.00021459553412989931),
            10: ([134, 59, 96, 250, 18, 474, 22, 334, 212, 130], 0.03245771144278594, 0.00021219335877334725),
            11: ([134, 59, 96, 372, 18, 474, 22, 334, 184, 130], 0.031164179104477403, 0.0001858722838790763),
            12: ([134, 59, 96, 372, 18, 474, 22, 334, 212, 130], 0.031184079601989854, 0.0001862932143922157),
            13: ([134, 59, 161, 372, 18, 451, 22, 334, 212, 184], 0.03462686567164178, 0.0002463701167527874),
            14: ([134, 59, 161, 372, 18, 474, 22, 334, 212, 130], 0.03460696517412935, 0.00023674278936860896),
            15: ([134, 59, 491, 250, 18, 474, 22, 334, 212, 130], 0.0323383084577113, 0.00020996799652537953),
            16: ([134, 115, 96, 250, 18, 474, 22, 334, 212, 130], 0.03253731343283569, 0.000212843797699111),
            17: ([134, 122, 161, 250, 435, 14, 22, 334, 212, 184], 0.03958208955223897, 0.0004196782008304337),
            18: ([134, 196, 96, 372, 18, 474, 22, 334, 212, 184], 0.02989054726368139, 0.00017910510644456544),
            19: ([134, 215, 491, 372, 18, 474, 22, 334, 212, 130], 0.02951243781094509, 0.00017241339841496866),
            20: ([134, 451, 491, 372, 18, 474, 22, 334, 212, 130], 0.030368159203979915, 0.00017974435086948632),
            21: ([184, 59, 66, 372, 18, 474, 22, 334, 212, 130], 0.032796019900497395, 0.00021485044681441234),
            22: ([184, 59, 96, 372, 18, 134, 22, 334, 212, 130], 0.03203980099502467, 0.0002031153145100614),
            23: ([184, 59, 161, 134, 18, 250, 22, 334, 212, 130], 0.036756218905472746, 0.0002763226524313221),
            24: ([184, 59, 161, 134, 18, 378, 22, 334, 212, 130], 0.03615920398009959, 0.00025393275002073097),
            25: ([184, 59, 161, 134, 18, 474, 22, 334, 212, 130], 0.03586069651741301, 0.00025144566361929124),
            26: ([184, 59, 161, 250, 18, 14, 22, 334, 212, 130], 0.03812935323383098, 0.000337094901984567),
            27: ([184, 59, 161, 250, 18, 474, 22, 334, 212, 130], 0.03681592039801008, 0.000288202848313509),
            28: ([184, 63, 161, 250, 18, 14, 22, 334, 212, 130], 0.03872636815920413, 0.00036138571447861623),
            29: ([184, 83, 161, 134, 18, 378, 22, 334, 212, 130], 0.037373134328358315, 0.0003141391858635788),
            30: ([184, 83, 161, 250, 18, 14, 22, 334, 212, 130], 0.03932338308457725, 0.000380576643466637),
            31: ([184, 83, 161, 250, 18, 378, 22, 334, 212, 130], 0.03822885572139318, 0.00035266934071941997),
            32: ([184, 122, 161, 250, 435, 14, 22, 334, 212, 130], 0.04005970149253749, 0.00043610046687480496),
            33: ([184, 451, 161, 134, 18, 474, 22, 334, 212, 130], 0.03528358208955229, 0.0002485670117144042),
            34: ([184, 451, 161, 250, 18, 14, 22, 334, 212, 130], 0.03769154228855733, 0.00033241673285108134),
            35: ([491, 59, 61, 134, 18, 474, 22, 334, 212, 130], 0.03066666666666646, 0.0001847859759043318),
            36: ([491, 59, 161, 134, 18, 378, 22, 334, 212, 130], 0.034328358208955224, 0.00022803715277399842),
            37: ([491, 59, 161, 134, 18, 378, 22, 334, 212, 184], 0.03454726368159206, 0.00023346892803156595),
            38: ([491, 59, 161, 134, 18, 474, 22, 334, 212, 130], 0.03406965174129352, 0.0002268415139708971),
            39: ([491, 215, 161, 134, 18, 474, 22, 334, 212, 184], 0.03293532338308443, 0.00021595867554937578),
            40: ([491, 451, 161, 134, 18, 413, 22, 334, 212, 184], 0.03323383084577102, 0.0002214514349570231),
            41: ([491, 451, 161, 134, 18, 474, 22, 334, 212, 130], 0.03351243781094522, 0.00022351267441187995)}

        sigma_s = [value[1] for value in pop_objs_dict.values()]
        ev_s = [value[2] for value in pop_objs_dict.values()]
        plt.figure(figsize=(10, 10), dpi=200)
        plt.ylim((0.0002, 0.0012))
        # plt.title('email_Eu_core')
        plt.xlabel('$\sigma$\'(S)', fontsize=20)
        plt.ylabel('EV(S)', fontsize=20)
        plt.scatter(sigma_s, ev_s, marker='s', label='RPMFIM')

        plt.legend()
        # for i in range(len(pop_objs_dict.keys())):
        #     plt.text(delta_s[i], ev_s[i], i, fontsize=10, color="r", weight="light",
        #              horizontalalignment='right')
        # plt.show()
        plt.savefig('result/graph/Random3.png')

if __name__ == '__main__':
    file_path = 'result/table/'
    DrawGraph(file_path)
